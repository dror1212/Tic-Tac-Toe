{"version":3,"sources":["App.tsx","index.tsx"],"names":["signs","App","props","state","boared","createBoared","turn","win","err","areasToWin","tempAreas","window","addEventListener","this","resize","bind","amount","Math","floor","innerWidth","setState","initGame","newAmount","temp","i","otherTemp","push","who","counter","counter2","j","map","places","y","place","x","Button","color","size","className","onClick","length","checkWin","Header","renderBoared","Form","onSubmit","Number","Field","type","Input","value","placeholder","onChange","e","target","undefined","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac04ddde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Header, Input, Form } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nconst defaultAmount = 3;\r\nconst signs = [\"X\", \"O\", \"_\"];\r\n\r\ninterface Iprops {}\r\n\r\ninterface Istate {\r\n  boared: number[][];\r\n  turn: number;\r\n  win: string;\r\n  err: string;\r\n  areasToWin: number;\r\n  tempAreas: string;\r\n}\r\n\r\nclass App extends Component<Iprops, Istate> {\r\n  constructor(props: Readonly<Iprops>) {\r\n    super(props);\r\n    this.state = {\r\n      boared: this.createBoared(defaultAmount),\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\",\r\n      areasToWin: defaultAmount,\r\n      tempAreas: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    this.resize();\r\n  }\r\n\r\n  resize() {\r\n    const amount = Math.floor(window.innerWidth / 120);\r\n    if (this.state.areasToWin > amount) {\r\n      this.setState({\r\n        areasToWin: amount >= defaultAmount ? amount : defaultAmount\r\n      });\r\n      this.setState({ tempAreas: \"\" });\r\n      this.initGame(amount >= defaultAmount ? amount : defaultAmount);\r\n    }\r\n  }\r\n\r\n  private initGame(newAmount?: number) {\r\n    this.setState({\r\n      boared: this.createBoared(newAmount ? newAmount : this.state.areasToWin),\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\"\r\n    });\r\n  }\r\n\r\n  private createBoared(amount: number) {\r\n    // Init the boared of the game\r\n    const temp = [];\r\n    for (let i = 0; i < amount; i++) {\r\n      const otherTemp = [];\r\n      for (let i = 0; i < amount; i++) {\r\n        otherTemp.push(2);\r\n      }\r\n      temp.push(otherTemp);\r\n    }\r\n    return temp;\r\n  }\r\n\r\n  private checkWin(who: number) {\r\n    // Check if someone won the game\r\n    let counter = 0;\r\n    let counter2 = 0;\r\n    for (let i = 0; i < this.state.areasToWin; i++) {\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let j = 0; j < this.state.areasToWin; j++) {\r\n        if (this.state.boared[i][j] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[j][i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let i = 0; i < this.state.areasToWin; i++) {\r\n        if (this.state.boared[i][i] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[i][this.state.areasToWin - 1 - i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (this.state.turn === this.state.areasToWin * this.state.areasToWin - 1) {\r\n      this.setState({ win: \"No one\" });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private renderBoared() {\r\n    return this.state.boared.map((places, y) => {\r\n      return (\r\n        <div>\r\n          {places.map((place, x) => {\r\n            return (\r\n              <Button\r\n                color=\"teal\"\r\n                size=\"massive\"\r\n                className=\"place\"\r\n                onClick={() => {\r\n                  if (!this.state.win) {\r\n                    // Copy the boared and save the changes if they are allowed\r\n                    const temp = { ...this.state.boared };\r\n                    if (signs[temp[y][x]] === signs[signs.length - 1]) {\r\n                      temp[y][x] = this.state.turn % 2;\r\n                      this.setState({ turn: this.state.turn + 1, err: \"\" });\r\n                      this.checkWin(this.state.turn % 2);\r\n                    } else {\r\n                      this.setState({\r\n                        err: \"You can choose only places that were not chosen\"\r\n                      });\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {signs[place]}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-tic-tac-toe\">\r\n        <Header className=\"my-header\" size=\"huge\">\r\n          Tic Tac Toe\r\n        </Header>\r\n        {this.renderBoared()}\r\n        <Form\r\n          onSubmit={() => {\r\n            // Change the boared to the size that was chosen\r\n            if (\r\n              Number(this.state.tempAreas) <\r\n                Math.floor(window.innerWidth / 120) + 1 &&\r\n              Number(this.state.tempAreas) > 2\r\n            ) {\r\n              this.setState({ areasToWin: Number(this.state.tempAreas) });\r\n              this.setState({ tempAreas: \"\" });\r\n              this.initGame(Number(this.state.tempAreas));\r\n            } else {\r\n              if (Math.floor(window.innerWidth / 120) > 3) {\r\n                this.setState({\r\n                  err:\r\n                    \"You can only choose between 3 to \" +\r\n                    Math.floor(window.innerWidth / 120)\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  err: \"In your phone the max size is 3\"\r\n                });\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Form.Field className=\"my-field\">\r\n            <Button color=\"twitter\" type=\"submit\">\r\n              Apply Changes\r\n            </Button>\r\n            <Input\r\n              className=\"my-input\"\r\n              value={this.state.tempAreas}\r\n              placeholder=\"Num of areas...\"\r\n              onChange={e => {\r\n                // Make sure you can only get numbers\r\n                const temp = e.target.value[e.target.value.length - 1];\r\n                if ((temp >= \"0\" && temp <= \"9\") || temp === undefined)\r\n                  this.setState({ tempAreas: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Field>\r\n        </Form>\r\n        {this.state.win && (\r\n          <Header size=\"large\">{this.state.win + \" won the game\"}</Header>\r\n        )}\r\n        {this.state.err && <Header size=\"large\">{this.state.err}</Header>}\r\n        {this.state.win && (\r\n          <Button\r\n            size=\"large\"\r\n            color=\"red\"\r\n            onClick={() => {\r\n              // Start the game again\r\n              this.initGame();\r\n            }}\r\n          >\r\n            Start again\r\n          </Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}