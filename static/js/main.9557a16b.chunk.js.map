{"version":3,"sources":["App.tsx","index.tsx"],"names":["signs","App","props","state","boared","createBoared","turn","win","err","areasToWin","tempAreas","newAmount","this","setState","amount","temp","i","otherTemp","push","who","counter","counter2","j","map","places","y","place","x","Button","color","size","className","onClick","length","checkWin","Header","renderBoared","Form","onSubmit","Number","initGame","Field","type","Input","value","placeholder","onChange","e","target","undefined","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9557a16b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Header, Input, Form } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nconst defaultAmount = 3;\r\nconst signs = [\"X\", \"O\", \"_\"];\r\n\r\ninterface Iprops {}\r\n\r\ninterface Istate {\r\n  boared: number[][];\r\n  turn: number;\r\n  win: string;\r\n  err: string;\r\n  areasToWin: number;\r\n  tempAreas: string;\r\n}\r\n\r\nclass App extends Component<Iprops, Istate> {\r\n  constructor(props: Readonly<Iprops>) {\r\n    super(props);\r\n    this.state = {\r\n      boared: this.createBoared(defaultAmount),\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\",\r\n      areasToWin: defaultAmount,\r\n      tempAreas: \"\"\r\n    };\r\n  }\r\n\r\n  private initGame(newAmount?: number) {\r\n    this.setState({\r\n      boared: this.createBoared(newAmount ? newAmount : this.state.areasToWin),\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\"\r\n    });\r\n  }\r\n\r\n  private createBoared(amount: number) {\r\n    // Init the boared of the game\r\n    const temp = [];\r\n    for (let i = 0; i < amount; i++) {\r\n      const otherTemp = [];\r\n      for (let i = 0; i < amount; i++) {\r\n        otherTemp.push(2);\r\n      }\r\n      temp.push(otherTemp);\r\n    }\r\n    return temp;\r\n  }\r\n\r\n  private checkWin(who: number) {\r\n    // Check if someone won the game\r\n    let counter = 0;\r\n    let counter2 = 0;\r\n    for (let i = 0; i < this.state.areasToWin; i++) {\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let j = 0; j < this.state.areasToWin; j++) {\r\n        if (this.state.boared[i][j] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[j][i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let i = 0; i < this.state.areasToWin; i++) {\r\n        if (this.state.boared[i][i] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[i][this.state.areasToWin - 1 - i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (this.state.turn === this.state.areasToWin * this.state.areasToWin - 1) {\r\n      this.setState({ win: \"No one\" });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private renderBoared() {\r\n    return this.state.boared.map((places, y) => {\r\n      return (\r\n        <div>\r\n          {places.map((place, x) => {\r\n            return (\r\n              <Button\r\n                color=\"teal\"\r\n                size=\"massive\"\r\n                className=\"place\"\r\n                onClick={() => {\r\n                  if (!this.state.win) {\r\n                    // Copy the boared and save the changes if they are allowed\r\n                    const temp = { ...this.state.boared };\r\n                    if (signs[temp[y][x]] === signs[signs.length - 1]) {\r\n                      temp[y][x] = this.state.turn % 2;\r\n                      this.setState({ turn: this.state.turn + 1, err: \"\" });\r\n                      this.checkWin(this.state.turn % 2);\r\n                    } else {\r\n                      this.setState({\r\n                        err: \"You can choose only places that were not chosen\"\r\n                      });\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {signs[place]}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-tic-tac-toe\">\r\n        <Header className=\"my-header\" size=\"huge\">\r\n          Tic Tac Toe\r\n        </Header>\r\n        {this.renderBoared()}\r\n        <Form\r\n          onSubmit={() => {\r\n            // Change the boared to the size that was chosen\r\n            if (\r\n              Number(this.state.tempAreas) < 8 &&\r\n              Number(this.state.tempAreas) > 2\r\n            ) {\r\n              this.setState({ areasToWin: Number(this.state.tempAreas) });\r\n              this.setState({ tempAreas: \"\" });\r\n              this.initGame(Number(this.state.tempAreas));\r\n            } else {\r\n              this.setState({ err: \"You can only choose between 3 to 7\" });\r\n            }\r\n          }}\r\n        >\r\n          <Form.Field className=\"my-field\">\r\n            <Button color=\"twitter\" type=\"submit\">\r\n              Apply Changes\r\n            </Button>\r\n            <Input\r\n              className=\"my-input\"\r\n              value={this.state.tempAreas}\r\n              placeholder=\"Num of areas...\"\r\n              onChange={e => {\r\n                // Make sure you can only get numbers\r\n                const temp = e.target.value[e.target.value.length - 1];\r\n                if ((temp >= \"0\" && temp <= \"9\") || temp === undefined)\r\n                  this.setState({ tempAreas: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Field>\r\n        </Form>\r\n        {this.state.win && (\r\n          <Header size=\"large\">{this.state.win + \" won the game\"}</Header>\r\n        )}\r\n        {this.state.err && <Header size=\"large\">{this.state.err}</Header>}\r\n        {this.state.win && (\r\n          <Button\r\n            size=\"large\"\r\n            color=\"red\"\r\n            onClick={() => {\r\n              // Start the game again\r\n              this.initGame();\r\n            }}\r\n          >\r\n            Start again\r\n          </Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}