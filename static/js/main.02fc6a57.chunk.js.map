{"version":3,"sources":["App.tsx","index.tsx"],"names":["signs","App","props","state","boared","createBoared","turn","win","err","areasToWin","tempAreas","mode","first","window","addEventListener","this","resize","bind","amount","Math","floor","innerWidth","setState","initGame","newAmount","nope","botTurn","myTurn","temp","p","forEach","line","y","space","x","length","checkWin","i","otherTemp","push","who","counter","counter2","j","map","places","place","Button","size","className","onClick","Header","renderBoared","Form","onSubmit","Number","Field","type","Input","value","placeholder","onChange","e","target","undefined","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02fc6a57.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Header, Input, Form } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nconst defaultAmount = 3;\r\nconst signs = [\"X\", \"O\", \"_\"];\r\n\r\ninterface Iprops {}\r\n\r\ninterface Istate {\r\n  boared: number[][];\r\n  turn: number;\r\n  win: string;\r\n  err: string;\r\n  areasToWin: number;\r\n  tempAreas: string;\r\n  mode: boolean;\r\n  first: boolean;\r\n}\r\n\r\nclass App extends Component<Iprops, Istate> {\r\n  constructor(props: Readonly<Iprops>) {\r\n    super(props);\r\n    this.state = {\r\n      boared: this.createBoared(defaultAmount),\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\",\r\n      areasToWin: defaultAmount,\r\n      tempAreas: \"\",\r\n      mode: true,\r\n      first: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    this.resize();\r\n  }\r\n\r\n  resize() {\r\n    const amount = Math.floor(window.innerWidth / 120);\r\n    if (this.state.areasToWin > amount) {\r\n      this.setState({\r\n        areasToWin: amount >= defaultAmount ? amount : defaultAmount,\r\n      });\r\n      this.setState({ tempAreas: \"\" });\r\n      this.initGame(amount >= defaultAmount ? amount : defaultAmount);\r\n    }\r\n  }\r\n\r\n  private initGame(newAmount?: number, nope?: boolean) {\r\n    this.setState({\r\n      turn: 0,\r\n      win: \"\",\r\n      err: \"\",\r\n      first: !this.state.first,\r\n    });\r\n    if (this.state.mode && !nope) {\r\n      if (this.state.first) {\r\n        this.botTurn(true);\r\n      } else {\r\n        this.setState({\r\n          boared: this.createBoared(\r\n            newAmount ? newAmount : this.state.areasToWin\r\n          ),\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        boared: this.createBoared(\r\n          newAmount ? newAmount : this.state.areasToWin\r\n        ),\r\n      });\r\n    }\r\n  }\r\n\r\n  private botTurn(turn?: boolean) {\r\n    const myTurn = turn ? 1 : this.state.turn + 1;\r\n    this.setState({ turn: myTurn + 1 });\r\n    const temp = turn\r\n      ? this.createBoared(this.state.areasToWin)\r\n      : this.state.boared;\r\n    let p = [0, 0];\r\n    temp.forEach((line, y) => {\r\n      line.forEach((space, x) => {\r\n        if (signs[space] === signs[signs.length - 1]) {\r\n          p = [y, x];\r\n        }\r\n      });\r\n    });\r\n    temp[p[0]][p[1]] = myTurn % 2;\r\n    if (!turn) {\r\n      this.checkWin(myTurn % 2);\r\n    } else {\r\n      this.setState({ boared: temp });\r\n    }\r\n  }\r\n\r\n  private createBoared(amount: number) {\r\n    // Init the boared of the game\r\n    const temp = [];\r\n    for (let i = 0; i < amount; i++) {\r\n      const otherTemp = [];\r\n      for (let i = 0; i < amount; i++) {\r\n        otherTemp.push(2);\r\n      }\r\n      temp.push(otherTemp);\r\n    }\r\n    return temp;\r\n  }\r\n\r\n  private checkWin(who: number) {\r\n    // Check if someone won the game\r\n    let counter = 0;\r\n    let counter2 = 0;\r\n    for (let i = 0; i < this.state.areasToWin; i++) {\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let j = 0; j < this.state.areasToWin; j++) {\r\n        if (this.state.boared[i][j] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[j][i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n      counter = 0;\r\n      counter2 = 0;\r\n      for (let i = 0; i < this.state.areasToWin; i++) {\r\n        if (this.state.boared[i][i] === who) {\r\n          counter += 1;\r\n        }\r\n        if (this.state.boared[i][this.state.areasToWin - 1 - i] === who) {\r\n          counter2 += 1;\r\n        }\r\n      }\r\n\r\n      if (\r\n        counter === this.state.areasToWin ||\r\n        counter2 === this.state.areasToWin\r\n      ) {\r\n        this.setState({ win: signs[who] });\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (this.state.turn === this.state.areasToWin * this.state.areasToWin - 1) {\r\n      this.setState({ win: \"No one\" });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private renderBoared() {\r\n    return this.state.boared.map((places, y) => {\r\n      return (\r\n        <div>\r\n          {places.map((place, x) => {\r\n            return (\r\n              <Button\r\n                size=\"massive\"\r\n                className=\"place\"\r\n                onClick={() => {\r\n                  if (!this.state.win) {\r\n                    // Copy the boared and save the changes if they are allowed\r\n                    const temp = { ...this.state.boared };\r\n                    if (signs[temp[y][x]] === signs[signs.length - 1]) {\r\n                      temp[y][x] = this.state.turn % 2;\r\n                      const win = this.checkWin(this.state.turn % 2);\r\n                      this.setState({ err: \"\" });\r\n                      if (!win && this.state.mode) {\r\n                        this.botTurn();\r\n                      } else {\r\n                        this.setState({ turn: this.state.turn + 1 });\r\n                      }\r\n                    } else {\r\n                      this.setState({\r\n                        err: \"You can choose only places that were not chosen\",\r\n                      });\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {signs[place]}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-tic-tac-toe\">\r\n        <Header className=\"my-header\" size=\"huge\">\r\n          Tic Tac Toe\r\n        </Header>\r\n        {this.renderBoared()}\r\n        <Form\r\n          onSubmit={() => {\r\n            // Change the boared to the size that was chosen\r\n            if (\r\n              Number(this.state.tempAreas) <\r\n                Math.floor(window.innerWidth / 120) + 1 &&\r\n              Number(this.state.tempAreas) > 2\r\n            ) {\r\n              this.setState({ areasToWin: Number(this.state.tempAreas) });\r\n              this.setState({ tempAreas: \"\" });\r\n              this.initGame(Number(this.state.tempAreas));\r\n            } else {\r\n              if (Math.floor(window.innerWidth / 120) > 3) {\r\n                this.setState({\r\n                  err:\r\n                    \"You can only choose between 3 to \" +\r\n                    Math.floor(window.innerWidth / 120),\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  err: \"In your phone the max size is 3\",\r\n                });\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <Form.Field className=\"my-field\">\r\n            <Button className=\"black\" type=\"submit\">\r\n              Apply Changes\r\n            </Button>\r\n            <Input\r\n              className=\"my-input\"\r\n              value={this.state.tempAreas}\r\n              placeholder=\"Num of areas...\"\r\n              onChange={(e) => {\r\n                // Make sure you can only get numbers\r\n                const temp = e.target.value[e.target.value.length - 1];\r\n                if ((temp >= \"0\" && temp <= \"9\") || temp === undefined)\r\n                  this.setState({ tempAreas: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Field>\r\n        </Form>\r\n        <Button\r\n          className=\"place\"\r\n          size=\"large\"\r\n          onClick={() => {\r\n            this.setState({ mode: !this.state.mode });\r\n            // this.initGame(undefined, !this.state.mode);\r\n          }}\r\n        >\r\n          {this.state.mode ? \"Play vs friend\" : \"Play vs computer\"}\r\n        </Button>\r\n        {this.state.win && (\r\n          <Header size=\"large\" className=\"white\">\r\n            {this.state.win + \" won the game\"}\r\n          </Header>\r\n        )}\r\n        {this.state.err && (\r\n          <Header size=\"large\" className=\"white\">\r\n            {this.state.err}\r\n          </Header>\r\n        )}\r\n        {this.state.win && (\r\n          <Button\r\n            className=\"place\"\r\n            size=\"large\"\r\n            onClick={() => {\r\n              // Start the game again\r\n              this.initGame();\r\n            }}\r\n          >\r\n            Start again\r\n          </Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}